{"version":3,"sources":["components/Controls/NumControl.js","components/Sockets/index.js","components/NumComponent/NumComponent.js","components/CustomNode/CustomNode.js","components/AddComponent/AddComponent.js","components/Controls/TextControl.js","components/FileComponent/FileComponent.js","components/App/App.js","serviceWorker.js","index.js"],"names":["NumControl","emitter","key","node","_this","readonly","arguments","length","undefined","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","component","initial","data","props","value","onChange","v","setValue","trigger","val","putData","update","Rete","Control","_ref","react_default","a","createElement","type","e","target","onPointerMove","stopPropagation","numSocket","Socket","dataSocket","NumComponent","out1","Output","ctrl","editor","addControl","addOutput","inputs","outputs","num","Component","CustomNode","_this$props","bindSocket","bindControl","_this$state","state","controls","selected","className","concat","style","background","name","map","output","react_render_plugin_esm","socket","io","innerRef","control","input","showControl","Node","AddComponent","inp1","Input","inp2","out","addInput","sum","num1","num2","nodes","find","n","id","get","TextControl","FileComponent","filename","parsed","Papa","parse","header","dynamicTyping","trimHeaders","skipEmptyLines","console","log","_callee2","container","components","engine","n1","n2","add","file","regenerator_default","wrap","_context2","prev","next","NodeEditor","use","ConnectionPlugin","ReactRenderPlugin","Engine","forEach","c","register","createNode","sent","position","addNode","connect","on","asyncToGenerator","mark","_callee","_context","abort","process","toJSON","stop","view","resize","AreaPlugin","zoomAt","App","width","height","ref","_x","_createEditor","apply","createEditor","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.badbcd21.chunk.js","sourcesContent":["import React from 'react';\nimport Rete from 'rete';\n\nexport default class NumControl extends Rete.Control {\n  static component = ({ value, onChange }) => (\n    <input\n      type=\"number\"\n      value={value}\n      onChange={e => onChange(+e.target.value)}\n      onPointerMove={e => e.stopPropagation()}\n    />\n  );\n\n  constructor(emitter, key, node, readonly = false) {\n    super(key);\n    this.emitter = emitter;\n    this.key = key;\n    this.component = NumControl.component;\n\n    const initial = node.data[key] || 0;\n\n    node.data[key] = initial;\n    this.props = {\n      readonly,\n      value: initial,\n      onChange: v => {\n        this.setValue(v);\n        this.emitter.trigger('process');\n      },\n    };\n  }\n\n  setValue(val) {\n    this.props.value = val;\n    this.putData(this.key, val);\n    this.update();\n  }\n}\n","import Rete from 'rete';\n\nexport const numSocket = new Rete.Socket('Number value');\n\nexport const dataSocket = new Rete.Socket('Data as JSON');\n","import Rete from 'rete';\n\nimport NumControl from '../Controls/NumControl';\nimport { numSocket } from '../Sockets';\n\nexport default class NumComponent extends Rete.Component {\n  constructor() {\n    super('Number');\n  }\n\n  builder(node) {\n    var out1 = new Rete.Output('num', 'Number', numSocket);\n    var ctrl = new NumControl(this.editor, 'num', node);\n\n    return node.addControl(ctrl).addOutput(out1);\n  }\n\n  worker(node, inputs, outputs) {\n    outputs['num'] = node.data.num;\n  }\n}\n","import React from 'react';\nimport { Node, Socket, Control } from 'rete-react-render-plugin';\n\nexport default class CustomNode extends Node {\n  render() {\n    const { node, bindSocket, bindControl } = this.props;\n    const { outputs, controls, inputs, selected } = this.state;\n\n    return (\n      <div className={`node ${selected}`} style={{ background: 'grey' }}>\n        <div className=\"title\">\n          {'<<'} {node.name} {'>>'}\n        </div>\n        {/* Outputs */}\n        {outputs.map(output => (\n          <div className=\"output\" key={output.key}>\n            <div className=\"output-title\">{output.name}</div>\n            <Socket type=\"output\" socket={output.socket} io={output} innerRef={bindSocket} />\n          </div>\n        ))}\n        {/* Controls */}\n        {controls.map(control => (\n          <Control className=\"control\" key={control.key} control={control} innerRef={bindControl} />\n        ))}\n        {/* Inputs */}\n        {inputs.map(input => (\n          <div className=\"input\" key={input.key}>\n            <Socket type=\"input\" socket={input.socket} io={input} innerRef={bindSocket} />\n            {!input.showControl() && <div className=\"input-title\">{input.name}</div>}\n            {input.showControl() && (\n              <Control className=\"input-control\" control={input.control} innerRef={bindControl} />\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import Rete from 'rete';\n\nimport NumControl from '../Controls/NumControl';\nimport { numSocket } from '../Sockets';\n\nimport CustomNode from '../CustomNode/CustomNode';\n\nclass AddComponent extends Rete.Component {\n  constructor() {\n    super('Add');\n    this.data.component = CustomNode; // optional\n  }\n\n  builder(node) {\n    var inp1 = new Rete.Input('num1', 'Number', numSocket);\n    var inp2 = new Rete.Input('num2', 'Number2', numSocket);\n    var out = new Rete.Output('num', 'Number', numSocket);\n\n    inp1.addControl(new NumControl(this.editor, 'num1', node));\n    inp2.addControl(new NumControl(this.editor, 'num2', node));\n\n    return node\n      .addInput(inp1)\n      .addInput(inp2)\n      .addControl(new NumControl(this.editor, 'preview', node, true))\n      .addOutput(out);\n  }\n\n  worker(node, inputs, outputs) {\n    var n1 = inputs['num1'].length ? inputs['num1'][0] : node.data.num1;\n    var n2 = inputs['num2'].length ? inputs['num2'][0] : node.data.num2;\n    var sum = n1 + n2;\n\n    this.editor.nodes\n      .find(n => n.id === node.id)\n      .controls.get('preview')\n      .setValue(sum);\n    outputs['num'] = sum;\n  }\n}\n\nexport default AddComponent;\n","import React from 'react';\nimport Rete from 'rete';\n\nexport default class TextControl extends Rete.Control {\n  static component = ({ value, onChange }) => (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={e => onChange(e.target.value)}\n      onPointerMove={e => e.stopPropagation()}\n    />\n  );\n\n  constructor(emitter, key, node, readonly = false) {\n    super(key);\n    this.emitter = emitter;\n    this.key = key;\n    this.component = TextControl.component;\n\n    const initial = node.data[key] || '';\n\n    node.data[key] = initial;\n    this.props = {\n      readonly,\n      value: initial,\n      onChange: v => {\n        this.setValue(v);\n        this.emitter.trigger('process');\n      },\n    };\n  }\n\n  setValue(val) {\n    this.props.value = val;\n    this.putData(this.key, val);\n    this.update();\n  }\n}\n","import Rete from 'rete';\nimport Papa from 'papaparse';\n\nimport TextControl from '../Controls/TextControl';\nimport { dataSocket } from '../Sockets';\n\nexport default class FileComponent extends Rete.Component {\n  constructor() {\n    super('File');\n  }\n\n  builder(node) {\n    var out1 = new Rete.Output('data', 'Data', dataSocket);\n    var ctrl = new TextControl(this.editor, 'filename', node);\n    node.data.filename =\n      'https://gist.githubusercontent.com/mbostock/4063570/raw/11847750012dfe5351ee1eb290d2a254a67051d0/flare.csv';\n\n    return node.addControl(ctrl).addOutput(out1);\n  }\n\n  worker(node, inputs, outputs) {\n    if (node.data.filename && node.data.filename.length > 0) {\n      const parsed = Papa.parse(node.data.filename, {\n        header: true,\n        dynamicTyping: true,\n        trimHeaders: true,\n        skipEmptyLines: true,\n      });\n\n      node.data.data = parsed;\n    } else {\n      node.data.data = {};\n    }\n\n    outputs['data'] = node.data.data;\n    console.log(node.data);\n  }\n}\n","import React from 'react';\nimport Rete from 'rete';\nimport ReactRenderPlugin from 'rete-react-render-plugin';\nimport ConnectionPlugin from 'rete-connection-plugin';\nimport AreaPlugin from 'rete-area-plugin';\n\nimport NumComponent from '../NumComponent/NumComponent';\nimport AddComponent from '../AddComponent/AddComponent';\nimport FileComponent from '../FileComponent/FileComponent';\n\nimport './App.css';\n\nexport async function createEditor(container) {\n  var components = [new NumComponent(), new AddComponent(), new FileComponent()];\n\n  var editor = new Rete.NodeEditor('demo@0.1.0', container);\n  editor.use(ConnectionPlugin);\n  editor.use(ReactRenderPlugin);\n\n  var engine = new Rete.Engine('demo@0.1.0');\n\n  components.forEach(c => {\n    editor.register(c);\n    engine.register(c);\n  });\n\n  var n1 = await components[0].createNode({ num: 2 });\n  var n2 = await components[0].createNode({ num: 3 });\n  var add = await components[1].createNode();\n  var file = await components[2].createNode();\n\n  n1.position = [80, 200];\n  n2.position = [80, 400];\n  add.position = [500, 240];\n  file.position = [80, 10];\n\n  editor.addNode(n1);\n  editor.addNode(n2);\n  editor.addNode(add);\n  editor.addNode(file);\n\n  editor.connect(n1.outputs.get('num'), add.inputs.get('num1'));\n  editor.connect(n2.outputs.get('num'), add.inputs.get('num2'));\n\n  editor.on('process nodecreated noderemoved connectioncreated connectionremoved', async () => {\n    console.log('process');\n    await engine.abort();\n    await engine.process(editor.toJSON());\n  });\n\n  editor.view.resize();\n  editor.trigger('process');\n  AreaPlugin.zoomAt(editor, editor.nodes);\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{ width: '100vw', height: '100vh' }} ref={ref => ref && createEditor(ref)} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}